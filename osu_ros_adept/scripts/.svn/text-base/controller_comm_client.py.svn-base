#!/usr/bin/env python

import rospy
import sys, socket, time, math, struct
from numpy import *
from osu_ros_adept.srv  import *

#defines the host ip address and port number to use
host = '172.16.120.147'
port = 11000

angle_msg = 1
xyz_msg = 2
speed_msg = 11
accel_msg = 12
tool_msg = 21

sock = None

num_cmd_params = 5 #Only change if ros.srv.cmd() in adept controller is changed
size = 1024


def connect():
	try: 
		#sets up socket and tries to connect
		global sock 
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		sock.connect((host,port))
	except socket.error, (value,message):
		#if connect fails, close the socket and exit
		if sock:
			sock.close()
		print "Could not open socket: " + message
		sys.exit(1)

#Sends robot Joint movements
def send_command(msg_params, joints):
 	
	bytes_sent = 0
	#Send Message length, type, etc
	for i in range(num_cmd_params):
		bytes_sent += sock.send(msg_params[i])
	
	#Send Joint angles
	for i in range(6):
		bytes_sent += sock.send(joints[i])	
		print joints[i]		

	#send unused joints, these are built into the message and must be there even if unused.
	jt7 = jt8 = jt9 = jt10 = "0000"
	unused_jnts = ""
	unused_jnts += jt7 + jt8 + jt9 + jt10
	bytes_sent += sock.send(unused_jnts)

	return bytes_sent

#Send robot velocity, acceleration, tool length etc
def send_params(msg_params):
	
	bytes_sent = 0

	for i in range(num_cmd_params):
		bytes_sent += sock.send(msg_params[i])

	return bytes_sent


#Add the necessary header to the command so that it can be recognized and accepted
def add_header(cmd, req):

	cmd.append(struct.pack("i", req.length))  #Message Length
	cmd.append(struct.pack("i", req.type))  #Message Type
	cmd.append(struct.pack("i", req.command))  #Message Command
	cmd.append(struct.pack("i", req.reply))  #Message Reply 
	cmd.append(struct.pack("i", req.unused))  #Discard bytes


def grab_values(req):
	
	print "Joint Service Initiated"
	cmd = []
	add_header(cmd, req)

	#add joints
	jts = []
	for i in range(6):
		jts.append(req.jts[i])
	#Set type to float32
	arr = array(req.jts, dtype=float32)
	#Send cmd with the array of new joint values
	bytes_sent = send_command(cmd, arr)
	
	return bytes_sent



def grab_params(req):
	
	print "Parameter Service Initiated"
	cmd = []
	add_header(cmd, req)
	bytes_sent = send_params(cmd)

	return bytes_sent
	

def main():
	
	#Connect and start the necessary services, then wait (spin) for commands
	rospy.init_node("controller_comm")	
	connect()
	rospy.Service('send_robot_movements', robot_movement_command, grab_values)
	rospy.Service('send_robot_parameters',robot_parameters_command, grab_params)	
	print "Spinning"
	rospy.spin()


if __name__ == "__main__":
	main()
